// Database schema for DevOps 2025 - Team ReleaseRangers
// This represents the database structure for the learning management system

Table users {
  id bigserial [primary key, note: 'Auto-incrementing user ID']
  email varchar [unique, not null, note: 'User email address (unique)']
  name varchar [note: 'User full name']
  password varchar [note: 'Encrypted password']
  created_at timestamp [not null, default: `now()`, note: 'Account creation timestamp']
  updated_at timestamp [not null, default: `now()`, note: 'Last update timestamp']
  
  Note: 'User accounts for authentication and authorization'
}

Table courses {
  course_id varchar [primary key, note: 'UUID for course identification']
  user_id varchar [not null, note: 'References the owner of the course']
  course_name varchar [not null, note: 'Name of the course']
  course_description text [note: 'Detailed course description']
  course_emoji varchar [note: 'Emoji representation for the course']
  course_is_favorite boolean [default: false, note: 'Whether course is marked as favorite']
  created_at timestamp [not null, default: `now()`, note: 'Course creation timestamp']
  updated_at timestamp [not null, default: `now()`, note: 'Last update timestamp']
  
  Note: 'Courses created by users to organize learning material'
}

Table chapters {
  chapter_id varchar [primary key, note: 'UUID for chapter identification']
  chapter_title varchar [not null, note: 'Title of the chapter']
  course_id varchar [not null, note: 'References the parent course']
  chapter_content text [note: 'Main content of the chapter']
  chapter_emoji varchar [note: 'Emoji representation for the chapter']
  chapter_is_favorite boolean [default: false, note: 'Whether chapter is marked as favorite']
  created_at timestamp [not null, default: `now()`, note: 'Chapter creation timestamp']
  updated_at timestamp [not null, default: `now()`, note: 'Last update timestamp']
  
  Note: 'Individual chapters within courses containing learning content'
}

Table uploaded_files {
  id varchar [primary key, note: 'UUID for file identification']
  filename varchar [not null, note: 'Original filename of uploaded file']
  content_type varchar [not null, note: 'MIME type of the file']
  data bytea [not null, note: 'Binary file data stored in database']
  course_id varchar [not null, note: 'References the associated course']
  created_at timestamp [not null, default: `now()`, note: 'File upload timestamp']
  updated_at timestamp [not null, default: `now()`, note: 'Last update timestamp']
  
  Note: 'Files uploaded by users for course content (PDFs, documents, etc.)'
}

// Relationships
Ref: courses.user_id > users.id [note: 'Each course belongs to a user (soft reference)']
Ref: chapters.course_id > courses.course_id [delete: cascade, note: 'Each chapter belongs to a course']
Ref: uploaded_files.course_id > courses.course_id [note: 'Each file is associated with a course (soft reference)']

// Notes about the schema
Note: '''
# Database Schema Notes

## Architecture
This is a microservices architecture with the following services:
- **authentication-service**: Manages users table
- **coursemgmt-service**: Manages courses and chapters tables  
- **upload-service**: Manages uploaded_files table

## Relationships
- Users create multiple Courses (1:N)
- Courses contain multiple Chapters (1:N with cascade delete)
- Courses can have multiple uploaded Files (1:N)

## Data Types
- Primary keys use UUID (except users which uses auto-increment)
- Timestamps automatically managed by Hibernate
- File data stored as binary blobs in database
- Soft references between microservices (no foreign key constraints across services)

## Key Features
- Favorite marking for both courses and chapters
- Audit trails with created_at/updated_at timestamps
- Cascade delete from courses to chapters
- Support for emoji representations
'''