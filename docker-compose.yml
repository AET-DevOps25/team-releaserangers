services:
  nginx-gateway:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - authentication-service
      - coursemgmt-service
      - upload-service
      - client
      - genai-service

  postgres-db:
    build:
      context: .
      dockerfile: Dockerfile.db
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U release -d devops25_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  authentication-service:
    build:
      context: ./server/authentication-service
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file: .env
    depends_on:
      postgres-db:
        condition: service_healthy

  coursemgmt-service:
    build:
      context: ./server/coursemgmt-service
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file: .env
    depends_on:
      postgres-db:
        condition: service_healthy

  upload-service:
    build:
      context: ./server/upload-service
    restart: unless-stopped
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file: .env
    depends_on:
      postgres-db:
        condition: service_healthy

  genai-service:
    build:
      context: ./genai
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./genai/.env
    environment:
      - COURSEMGMT_URL=http://coursemgmt-service:8080
    ports:
      - "8084:8000"
    depends_on:
      - coursemgmt-service
      - upload-service

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - authentication-service
      - coursemgmt-service
      - upload-service

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - upload-service
      - genai-service
      - coursemgmt-service
      - authentication-service
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped


  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
    # entrypoint: ["sh", "-c", "/etc/grafana/provisioning/init_grafana.sh"]
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/loki-config.yaml
    restart: unless-stopped

  swagger-ui:
    build:
      context: ./docs/api
      dockerfile: Dockerfile.swagger-ui
    ports:
      - "8088:8080"

volumes:
  postgres-data:
  prometheus_data:
  grafana-storage:
  loki_data:
  promtail_data:
