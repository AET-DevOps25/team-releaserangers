name: Build and Deploy Docker to AWS EC2

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Setup the AWS environment"]
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: AWS_EC2
      url: "https://client.${{ vars.EC2_PUBLIC_IP }}.nip.io"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy Docker Compose File From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "./docker-compose.aws.yml"
          target: /home/${{ vars.AWS_EC2_USER }}

      - name: Copy Monitoring Configuration Files to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "./prometheus,./grafana,./promtail,./loki"
          target: /home/${{ vars.AWS_EC2_USER }}

      - name: SSH to VM and Create .env.prod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            rm .env.prod
            touch .env.prod
            cat > .env.prod <<EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CLIENT_URL=https://client.${{ vars.EC2_PUBLIC_IP }}.nip.io
            CLIENT_HOST=client.${{ vars.EC2_PUBLIC_IP }}.nip.io
            SERVER_HOST=api.${{ vars.EC2_PUBLIC_IP }}.nip.io
            GRAFANA_HOST=grafana.${{ vars.EC2_PUBLIC_IP }}.nip.io
            PROMETHEUS_HOST=prometheus.${{ vars.EC2_PUBLIC_IP }}.nip.io
            LLM_API_KEY=${{ secrets.LLM_API_KEY }}
            LLM_API_URL=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite-preview-06-17:generateContent
            LLM_MODEL=gemini-2.5-flash-lite-preview-06-17
            LLM_BACKEND=google
            COURSEMGMT_URL=http://coursemgmt-service:8080
            FILE_PARSING=False
            EOF

      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo "Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "Starting Docker Compose..."
            sudo docker compose -f docker-compose.aws.yml --env-file=.env.prod up --pull=always -d --remove-orphans
