services:
  reverse-proxy:
    image: traefik:v3.4
    restart: unless-stopped
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@tum.de"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt

  authentication-service:
    image: ghcr.io/aet-devops25/team-releaserangers/authentication-service:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      postgres-db:
        condition: service_healthy

  coursemgmt-service:
    image: ghcr.io/aet-devops25/team-releaserangers/coursemgmt-service:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      postgres-db:
        condition: service_healthy

  upload-service:
    image: ghcr.io/aet-devops25/team-releaserangers/upload-service:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      postgres-db:
        condition: service_healthy

  client:
    image: ghcr.io/aet-devops25/team-releaserangers/client:latest
    restart: unless-stopped
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${CLIENT_HOST}`)"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.client-compress.compress=true"
      - "traefik.http.routers.client.middlewares=client-compress"
      - "traefik.http.routers.client.priority=1"
    depends_on:
      - authentication-service
      - coursemgmt-service
      - upload-service

  genai-service:
    image: ghcr.io/aet-devops25/team-releaserangers/genai-service:latest
    restart: unless-stopped
    environment:
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_API_URL=${LLM_API_URL}
      - LLM_MODEL=${LLM_MODEL}
      - LLM_BACKEND=${LLM_BACKEND}
      - COURSEMGMT_URL=http://coursemgmt-service:8080
    depends_on:
      - coursemgmt-service
      - upload-service

  nginx-gateway:
    image: ghcr.io/aet-devops25/team-releaserangers/nginx-gateway:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`${SERVER_HOST}`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=80"
      - "traefik.http.routers.api-gateway.entrypoints=websecure"
      - "traefik.http.routers.api-gateway.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api-gateway.priority=100"
    depends_on:
      - authentication-service
      - coursemgmt-service
      - upload-service
      - genai-service

  postgres-db:
    image: ghcr.io/aet-devops25/team-releaserangers/postgresdb:latest
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U release -d devops25_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
